1) Program to find the saddle point coordinates in a given matrix | Faceprep

Program to find the saddle point coordinates in a given matrix is discussed here. 
A saddle point is an element of the matrix, which is the minimum element in its row and 
the maximum in its column.

For example, consider the matrix given below

                1    2     3 

Mat[3][3] =     4     5     6

                7     8     9

Here, 7 is the saddle point because it is the 
minimum element in its row and maximum element in its column

----------------------------------------------------------------------------------------------------------------------------------

2) An array contains both positive and negative numbers in random order.
Rearrange the array elements so that positive and negative numbers are placed alternatively.
Number of positive and negative numbers need not be equal. If there are more positive numbers 
they appear at the end of the array. If there are more negative numbers, 
they too appear in the end of the array.

For example, if the input array is [-1, 2, -3, 4, 5, 6, -7, 8, 9], 
then the output should be [9, -7, 8, -3, 5, -1, 2, 4, 6]

----------------------------------------------------------------------------------------------------------------------------------

3) Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.

Example:

Input: 3 
Output: [ [ 1, 2, 3 ], 
          [ 8, 9, 4 ], 
          [ 7, 6, 5 ] ]

----------------------------------------------------------------------------------------------------------------------------------

4) Given an unsorted array of integers, find the length of the longest 
consecutive elements sequence.

Your algorithm should run in O(n) complexity.

Example:

Input: [100, 4, 200, 1, 3, 2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. 
Therefore its length is 4.

----------------------------------------------------------------------------------------------------------------------------------

5) Given an array of non-negative integers, you are initially positioned at the 
first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

Example:

Input: [2,3,1,1,4]

Output: 2

Explanation: The minimum number of jumps to reach the last index is 2.
Jump 1 step from index 0 to 1, then 3 steps to the last index.
    
Note:

You can assume that you can always reach the last index.

----------------------------------------------------------------------------------------------------------------------------------

6) Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb" Output: 3 Explanation: The answer is "abc", with the length of 3. 

Example 2:

Input: "bbbbb" Output: 1 Explanation: The answer is "b", with the length of 1. 

Example 3:

Input: "pwwkew" Output: 3 Explanation: The answer is "wke", with the length of 3. 
Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

----------------------------------------------------------------------------------------------------------------------------------

7) Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right 
which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input: [   [1,3,1], [1,5,1], [4,2,1] ] 
Output: 7 
Explanation: Because the path 1→3→1→1→1 minimizes the sum. 

----------------------------------------------------------------------------------------------------------------------------------

8) You are given an n x n 2D matrix representing an image.

Rotate the image by 90 degrees (clockwise).

Note:

You have to rotate the image in-place, which means you have to modify 
the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

Example 1:

Given input matrix = [ [1,2,3], [4,5,6], [7,8,9] ], 
rotate the input matrix in-place such that it becomes: [ [7,4,1], [8,5,2], [9,6,3] ] 

Example 2:

Given input matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], 
rotate the input matrix in-place such that it becomes: 
[ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ]

----------------------------------------------------------------------------------------------------------------------------------

9) Given an array of n positive integers and a positive integer s, 
find the minimal length of a contiguous subarray of which the sum ≥ s. 
If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3] 
Output: 2 
Explanation: the subarray [4,3] has the minimal length under the problem constraint.

----------------------------------------------------------------------------------------------------------------------------------

10)* Given an array nums of integers, you can perform operations on the array.

In each operation, you pick any nums[i] and delete it to earn nums[i] points. 
After, you must delete every element equal to nums[i] - 1 or nums[i] + 1.

You start with 0 points. Return the maximum number of points you can earn by applying 
such operations.

Example 1:

Input: nums = [3, 4, 2] Output: 6 Explanation: Delete 4 to earn 4 points, 
consequently 3 is also deleted. Then, delete 2 to earn 2 points. 6 total points are earned. 

 

Example 2:

Input: nums = [2, 2, 3, 3, 3, 4] Output: 9 Explanation: Delete 3 to earn 3 points, 
deleting both 2's and the 4. Then, delete 3 again to earn 3 points, and 3 again to earn 3 points. 9 total points are earned.

Note:

The length of nums is at most 20000.

Each element nums[i] is an integer in the range [1, 10000].

----------------------------------------------------------------------------------------------------------------------------------
11)* Given a positive integer, output its complement number. 
The complement strategy is to flip the bits of its binary representation.

Note:

The given integer is guaranteed to fit within the range of a 32-bit signed integer.

You could assume no leading zero bit in the integer’s binary representation.

Example 1:

Input: 5 Output: 2 Explanation: The binary representation of 5 is 101 (no leading zero bits), 
and its complement is 010. So you need to output 2. 

Example 2:

Input: 1 
Output: 0 
Explanation: The binary representation of 1 is 1 (no leading zero bits), 
and its complement is 0. So you need to output 0. 

----------------------------------------------------------------------------------------------------------------------------------

12) Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it
represented by array nums. You are asked to burst all the balloons. 
If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. 
Here left and right are adjacent indices of i. 
After the burst, the left and right then becomes adjacent.

Find the maximum coins you can collect by bursting the balloons wisely.

Note:

You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.

0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100

Example:

Input: [3,1,5,8] 
Output: 167 
Explanation: nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []   
coins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167.

----------------------------------------------------------------------------------------------------------------------------------

13)* A string of '0's and '1's is monotone increasing if it consists of 
some number of '0's (possibly 0), followed by some number of '1's (also possibly 0.)

We are given a string S of '0's and '1's, and we may flip any '0' to a '1' or a '1' to a '0'.

Return the minimum number of flips to make S monotone increasing.

----------------------------------------------------------------------------------------------------------------------------------

14) Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

Example 1:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac" 
Output: true 

Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc" 
Output: false

----------------------------------------------------------------------------------------------------------------------------------

15) Given some text lines in one string each line is separated by '\n' character.
        Write an efficient code to print five lines from the end.

----------------------------------------------------------------------------------------------------------------------------------
16) 
Generate all possible sorted arrays from alternate elements of two given sorted arrays
Given two sorted arrays A and B, generate all possible arrays such that first element is
taken from A then from B then from A and so on in increasing order till the arrays exhausted. 
The generated arrays should end with an element from B.

For Example

 
A = {10, 15, 25}

B = {1, 5, 20, 30}

The resulting arrays are:
  10 20
  10 20 25 30
  10 30
  15 20
  15 20 25 30
  15 30
  25 30

----------------------------------------------------------------------------------------------------------------------------------

17) Merging two unsorted arrays in sorted order
Write a SortedMerge() function that takes two lists, each of which is unsorted, 
and merges the two together into one new list which is in sorted (increasing) order. 
SortedMerge() should return the new list.

Examples :

Input : a[] = {10, 5, 15}
        b[] = {20, 3, 2}
Output : Merge List :
        {2, 3, 5, 10, 15, 20}

Input : a[] = {1, 10, 5, 15}
        b[] = {20, 0, 2}
Output : Merge List :
        {0, 1, 2, 5, 10, 15, 20}

----------------------------------------------------------------------------------------------------------------------------------

18) intersection of two unsorted arrays.

----------------------------------------------------------------------------------------------------------------------------------

21) Find m-th smallest value in k sorted arrays

Given k sorted arrays of possibly different sizes, find m-th smallest value in the merged array.

Examples:

Input: m = 5 arr[][] = { {1, 3}, {2, 4, 6}, {0, 9, 10, 11}} ; 
Output: 4 Explanation The merged array would be {0 1 2 3 4 6 9 10 11}. 
The 5-th smallest element in this merged array is 4. 

Input: 6 = 2 arr[][] = { {1, 3, 20}, {2, 4, 6}} ; 
Output: 20

----------------------------------------------------------------------------------------------------------------------------------

22) Given a sorted and rotated array, find if there is a pair with a given sum

Given an array that is sorted and then rotated around an unknown point. 
Find if the array has a pair with a given sum ‘x’. It may be assumed that all elements in the array are distinct.

Examples :

Input: arr[] = {11, 15, 6, 8, 9, 10}, x = 16 
Output: true There is a pair (6, 10) with sum 16 

Input: arr[] = {11, 15, 26, 38, 9, 10}, x = 35 
Output: true There is a pair (26, 9) with sum 35 

Input: arr[] = {11, 15, 26, 38, 9, 10}, x = 45 
Output: false There is no pair with sum 45.
